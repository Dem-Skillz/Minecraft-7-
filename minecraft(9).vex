#include "robot-config.h"

int main()
{
     
}
void autonomous( void )
{
    Top_right.spin(directionType::rev);
    Top_left.spin(directionType::rev);
    Bottom_right.spin(directionType::rev);
    Bottom_left.spin(directionType::rev);
    
    task::sleep(1000);
    
    Vision1.takeSnapshot(1);
  
    if(Vision1.largestObject.exist && VisionSensor.largestObject.width>5) {
    
        Brain.Screen.setPenColor(vex::color::white);
        Brain.Screen.setFillColor(vex::color::green);
        Brain.Screen.drawRectangle(0,0, 480, 240);
        Brain.Screen.setCursor(2,6);
        Brain.Screen.setFont(vex::fontType::mono40);
        Brain.Screen.print("Forward");
        Top_right.spin(vex::directionType::fwd);
        Top_left.spin(vex::directionType::fwd);
        Bottom_right.spin(vex::directionType::fwd);
        Bottom_left.spin(vex::directionType::fwd);
  }
  else{
     
      Vision1.takeSnapshot(2);
   
      if(VisionSensor.largestObject.exists && VisionSensor.largestObject.width>5) {
      
        Brain.Screen.setPenColor(vex::color::black);
        Brain.Screen.setFillColor(vex::color::yellow);
        Brain.Screen.drawRectangle(0,0, 480, 240);
        Brain.Screen.setCursor(2,6);
        Brain.Screen.setFont(vex::fontType::mono40);
        Brain.Screen.print("Right");
        Top_left.spin(vex::directionType::fwd);
        Top_Right.spin(vex::directionType::rev);
        Bottom_left.spin(vex::directionType::fwd);
        Bottom_right.spin(vex::directionType::rev);
  }
    else{
     Vision1.takeSnapshot(3);  
       if (VisionSensor.largestObject.exists && VisionSensor.largestObject.width>5) {
        Brain1.Screen.setPenColor(vex::color::white);
        Brain1.Screen.setFillColor(vex::color::red);
        Brain1.Screen.drawRectangle(0,0, 480, 240);
        Brain1.Screen.setCursor(2,6);
        Brain1.Screen.setFont(vex::fontType::mono40);
        Brain1.Screen.print("Left");
        Top_left.spin(vex::directionType::rev);
        Top_Right.spin(vex::directionType::fwd);
        Bottom_left.spin(vex::directionType::rev);
        Bottom_right.spin(vex::directionType::fwd);  
    else {
        Top_left.stop(brakeType::brake);
        Top_Right.stop(brakeType::brake);
        Bottom_left.stop(brakeType::brake);
        Bottom_right.stop(brakeType::brake);
        }
        }
        } 
    task::sleep(100);
}
}

void usercontrol( ){

    while(true)
    {
        Top_left.spin(directionType::fwd, Controller1.Axis3.value(), velocityUnits::pct);
        Bottom_left.spin(directionType::fwd, Controller1.Axis3.value(), velocityUnits::pct);
        Top_right.spin(directionType::fwd, Controller1.Axis2.value(), velocityUnits::pct);
        Bottom_right.spin(directionType::fwd, Controller1.Axis2.value(), velocityUnits::pct);
    
        
        if(Controller1.ButtonL1.pressing()) {
        Brush1.setVelocity(100, velocityUnits::pct);
        Brush1.spin(directionType::fwd);
        Brush2.setVelocity(100, velocityUnits::pct);
        Brush2.spin(directionType::fwd);   
        }
        else if(Controller1.ButtonR1.pressing())  {
        Brush1.setVelocity(100, velocityUnits::pct);
        Brush1.spin(directionType::rev);
        Brush2.setVelocity(100, velocityUnits::pct);
        Brush2.spin(directionType::rev);
        }
        else {
        Brush1.stop(brakeType::brake);
        Brush2.stop(brakeType::brake);
        }
        
        
        

        if(Controller1.ButtonA.pressing()) {
        Push_mechanism.setVelocity(50, velocityUnits::pct);
        Push_mechanism.spin(directionType::fwd);
        Push_mechanism2.setVelocity(50, velocityUnits::pct);
        Push_mechanism2.spin(directionType::fwd);
        }
        else if(Controller1.ButtonB.pressing()) {
        Push_mechanism.setVelocity(50, velocityUnits::pct);
        Push_mechanism.spin(directionType::rev);
        Push_mechanism2.setVelocity(50, velocityUnits::pct);
        Push_mechanism2.spin(directionType::rev);
        }
        else 
        {
            Push_mechanism.stop(brakeType::brake);
            Push_mechanism.stop(brakeType::brake);
        }
                     
   }
}
